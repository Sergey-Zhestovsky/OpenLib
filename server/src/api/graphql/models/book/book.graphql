enum SortBookdField {
  pages
  ratingCounter
  date
}

type Book {
  id: ID!
  name: String!
  pages: Int!
  description: String!
  author: Author!
  genre: Genre!
  rated: Boolean!
  rating: [User]!
  ratingCounter: Int!
  date: String!
}

input GetBookInput {
  id: ID!
}

input SortBooksInput {
  sortField: SortBookdField! = date
  sortValue: Int! = -1
}

input GetBooksInput {
  limit: Int = 0
  page: Int = 0
  authors: [ID] = []
  genres: [ID] = []
  sort: SortBooksInput = {}
  search: String = ""
}

input GetBookSimilarInput {
  id: ID!
  limit: Int = 1
}

input AddBookInput {
  name: String
  pages: Int
  description: String
  author: ID
  genre: ID
}

input EditBookInput {
  id: ID!
  name: String
  pages: Int
  description: String
  author: ID
  genre: ID
}

input RateBookInput {
  id: ID!
}

extend type Query {
  getBook(input: GetBookInput!): Book!
  getBooks(input: GetBooksInput!): [Book]!
  getSimilar(input: GetBookSimilarInput): [Book]!
}

extend type Mutation {
  addBook(input: AddBookInput!): Book!
  editBook(input: EditBookInput!): Book!
  toggleBookRate(input: RateBookInput!): Book! @authorized
}
